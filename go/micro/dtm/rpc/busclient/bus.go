// Code generated by goctl. DO NOT EDIT!
// Source: bus.proto

package busclient

import (
	"context"

	"study/micro/dtm/rpc/bus"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Request    = bus.Request
	Response   = bus.Response
	XaRequest  = bus.XaRequest
	XaResponse = bus.XaResponse

	Bus interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		XaNotify(ctx context.Context, in *XaRequest, opts ...grpc.CallOption) (*XaResponse, error)
	}

	defaultBus struct {
		cli zrpc.Client
	}
)

func NewBus(cli zrpc.Client) Bus {
	return &defaultBus{
		cli: cli,
	}
}

func (m *defaultBus) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := bus.NewBusClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultBus) XaNotify(ctx context.Context, in *XaRequest, opts ...grpc.CallOption) (*XaResponse, error) {
	client := bus.NewBusClient(m.cli.Conn())
	return client.XaNotify(ctx, in, opts...)
}
