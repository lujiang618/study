#!/usr/local/bin/lua

-- 变量

-- Lua 变量有三种类型：全局变量、局部变量、表中的域。

-- Lua 中的变量全是全局变量，哪怕是语句块或是函数里，除非用 local 显式声明为局部变量。
-- 局部变量的作用域为从声明位置开始到所在语句块结束。

-- 变量的默认值均为 nil。

a = 5
local b = 5

function joke()
    c = 5
    local d = 6
end

joke()

print(c, d)

do
    local a = 6
    b = 6
    print(a, b)
end

print(a, b)


print('...........................................................................................')
-- Lua 可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量。
x = 2

a, b = 10, 2 * x
print(a, b)
a = 10; b = 2 * x


print(a, b)

-- 遇到赋值语句Lua会先计算右边所有的值然后再执行赋值操作，所以我们可以这样进行交换变量的值：
a, b = b, a
print(a, b)

-- 当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：
-- a. 变量个数 > 值的个数             按变量个数补足nil
-- b. 变量个数 < 值的个数             多余的值会被忽略

print('...........................................................................................')
a, b, c = 0, 1
print(a, b, c)

a, b = a + 1, b + 1, b + 2
print(a, b)


a, b, c = 0
print(a, b, c)


-- 多值赋值经常用来交换变量，或将函数调用返回给变量：
function f()
    return 1, 2
end

a, b = f()
print(a, b)

-- 应该尽可能的使用局部变量，有两个好处：
--1. 避免命名冲突。
-- 2. 访问局部变量的速度比全局变量更快。

print('...........................................................................................')

-- 对 table 的索引使用方括号 []。Lua 也提供了 . 操作
-- t[i] t.i gettable_event(t,i)















